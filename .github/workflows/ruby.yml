# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will download a prebuilt Ruby version, install dependencies and run tests with Rake
# For more information see: https://github.com/marketplace/actions/setup-ruby-jruby-and-truffleruby

name: Ruby

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  test:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        ruby-version: ['2.6', '2.7', '3.0']

    steps:
    - uses: actions/checkout@v3
    - name: Set up Ruby
    # To automatically get bug fixes and new Ruby versions for ruby/setup-ruby,
    # change this to (see https://github.com/ruby/setup-ruby#versioning):
    # uses: ruby/setup-ruby@v1
      uses: ruby/setup-ruby@55283cc23133118229fd3f97f9336ee23a179fcf # v1.146.0
      with:
        ruby-version: ${{ matrix.ruby-version }}
        bundler-cache: true # runs 'bundle install' and caches installed gems automatically
    - name: Run tests
      run: bundle exec rake
      import paramiko
import sys
import select
import tty
import termios

# SSH credentials and server details
hostname = 'example.com'
port = 22
username = 'your_username'
password = 'your_password'

# Create an SSH client
client = paramiko.SSHClient()
client.set_missing_host_key_policy(paramiko.AutoAddPolicy())

# Connect to the server
client.connect(hostname, port, username, password)
channel = client.invoke_shell()

# Save the current terminal settings
oldtty = termios.tcgetattr(sys.stdin)
try:
    tty.setraw(sys.stdin.fileno())
    tty.setcbreak(sys.stdin.fileno())
    channel.settimeout(0.0)

    while True:
        readable, _, _ = select.select([channel, sys.stdin], [], [])
        if sys.stdin in readable:
            x = sys.stdin.read(1)
            if not x:
                break
            channel.send(x)
        if channel in readable:
            try:
                data = channel.recv(1024)
                if not data:
                    break
                sys.stdout.write(data.decode('utf-8'))
                sys.stdout.flush()
            except:
                pass
finally:
    # Restore the terminal settings
    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, oldtty)
    client.close()
import paramiko

# SSH credentials and server details
hostname = 'example.com'
port = 22
username = 'your_username'
password = 'your_password'
command = 'ls -l'

# Create an SSH client
client = paramiko.SSHClient()
client.set_missing_host_key_policy(paramiko.AutoAddPolicy())

# Connect to the server
client.connect(hostname, port, username, password)

# Execute a command
stdin, stdout, stderr = client.exec_command(command)
for line in stdout.readlines():
    print(line.strip())

# Close the SSH connection
client.close()

